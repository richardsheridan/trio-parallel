name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  Blacken:
    name: 'Formatting and linting'
    timeout-minutes: 2
    runs-on: 'ubuntu-latest'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup python
        uses: actions/setup-python@v3
      - name: Pip cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-black-${{ hashFiles('**/requirements/lint.txt') }}
      - name: Install requirements
        run: |
          python -m pip install -U pip
          python -m pip install -r requirements/lint.txt
      - name: Run Black
        id: black
        run: black --check --diff trio_parallel
        continue-on-error: true
      - name: Run flake8
        id: flake8
        run: flake8 trio_parallel/ --ignore=D,E,W,F401,F403,F405,F821,F822
        continue-on-error: true
      - name: Fail on error
        if: steps.black.outcome != 'success' || steps.flake8.outcome != 'success'
        run: exit 1

  Build:
    name: Build
    timeout-minutes: 5
    runs-on: ubuntu-latest
    outputs:
      wheelname: ${{ steps.outputs.outputs.wheelname }}
      settings: ${{ steps.outputs.outputs.settings }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup python
        uses: actions/setup-python@v3
      - name: Pip cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-build-${{ hashFiles('**/requirements/build.txt') }}
      - name: Install requirements
        run: |
          python -m pip install -U pip
          python -m pip install -r requirements/build.txt
      - name: Build sdist wheel
        run: |
          python -m build --no-isolation  # already isolated & build deps pinned
      - name: Set outputs
        id: outputs
        run: |
          echo "::set-output name=wheelname::$( echo ./dist/*.whl )"
          echo "::set-output name=settings::$( tar cz pyproject.toml requirements/test.txt | base64 -w 0 )"
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: Build
#         by default build puts sdist and wheel here
          path: dist/
          if-no-files-found: error

  Test:
    name: 'Test ${{ matrix.os }} (${{ matrix.python }} ${{ matrix.arch }})'
    needs: Build
    timeout-minutes: 10
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        experimental: [ false ]
        os:
          - windows-latest
          - ubuntu-latest
          - macos-latest
        python:
          - '3.7'
          - '3.8'
          - '3.9'
          - '3.10'
          - 'pypy-3.7'
          - 'pypy-3.8'
        arch: [ x64, x86 ]
        include:
          - os: ubuntu-latest
            python: 'pypy-3.9-nightly'
            arch: x64
            experimental: true
          - os: ubuntu-latest
            python: '3.11-dev'
            arch: x64
            experimental: true
        exclude:
          - os: windows-latest
            python: 'pypy-3.7'
          - os: windows-latest
            python: 'pypy-3.8'
          - os: ubuntu-latest
            arch: x86
          - os: macos-latest
            arch: x86
    steps:
      - name: Setup python
        uses: actions/setup-python@v3
        with:
          python-version: '${{ matrix.python }}'
          architecture: '${{ matrix.arch }}'
      - name: Input settings
        run: echo "${{ needs.Build.outputs.settings }}" | base64 -d | tar xz
        shell: bash
      - name: Pip cache
        uses: actions/cache@v3
        with:
          path: |
            ~/AppData/Local/pip/Cache
            ~/.cache/pip
            ~/Library/Caches/pip
          key: ${{ matrix.os }}-pip-${{ matrix.arch }}-${{ matrix.python }}-${{ hashFiles('**/requirements/test.txt') }}
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: Build
          path: dist
      - name: Install requirements
        run: |
          python -m pip install -U pip
          python -m pip install -r requirements/test.txt
      - name: Install wheel
        run: |
          python -m pip install ${{ needs.Build.outputs.wheelname }} --no-deps
      - name: Run tests
        run: |
          pytest trio_parallel --cov-report xml:coverage-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.python }}.xml
          coverage report
          mv .coverage .coverage.${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.python }}
        shell: bash
      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Coverage
          path: "*coverage*${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.python }}*"
          if-no-files-found: error

  Examples:
    name: 'Test examples ${{ matrix.os }} (${{ matrix.python }} ${{ matrix.arch }})'
    timeout-minutes: 10
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-latest
          - ubuntu-latest
          - macos-latest
        python:
          - '3.10'
        arch:
          - x64
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup python
        uses: actions/setup-python@v3
        with:
          python-version: '${{ matrix.python }}'
          architecture: '${{ matrix.arch }}'
      - name: Pip cache
        uses: actions/cache@v3
        with:
          path: |
            ~/AppData/Local/pip/Cache
            ~/.cache/pip
            ~/Library/Caches/pip
          key: ${{ matrix.os }}-pip-${{ matrix.arch }}-${{ matrix.python }}-${{ hashFiles('**/requirements/test.txt') }}
      - name: Install requirements
        run: |
          python -m pip install -U pip
          python -m pip install -r requirements/test.txt
      - name: Install editable source
        run: |
          python -m pip install -e .[test] --no-deps
      - name: Run tests
        run: |
          python -m pytest --no-cov docs/source

  Codecov: # Codecov is naughty and will be forever isolated
    name: Codecov
    if: always()
    needs: Test
    timeout-minutes: 1
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Download coverage artifact
        uses: actions/download-artifact@v3
        with:
          name: Coverage
      - name: Upload to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true

  Coverage:
    name: Coverage
    if: always()
    needs: Test
    timeout-minutes: 1
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Download coverage artifact
        uses: actions/download-artifact@v3
        with:
          name: Coverage
      - name: Setup python
        uses: actions/setup-python@v3
      - name: Install coverage
        run: |
          pip install -U pip
          pip install -r requirements/coverage.txt
      - name: Run coverage
        run: |
          coverage combine
          coverage html
          coverage report --fail-under=100 --show-missing
      - name: Upload report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Report
          path: htmlcov/
          if-no-files-found: error

  All:
    name: All checks and tests
    timeout-minutes: 1
    needs: [ Blacken, Build, Examples, Test, Codecov, Coverage ]
    runs-on: ubuntu-latest
    steps:
      - name: "true"
        run: "true"

  Merge-Dependabot:
    needs: All
    if: github.event_name == 'pull_request'
    timeout-minutes: 1
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
    steps:
      - uses: fastify/github-action-merge-dependabot@v3.1.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          merge-method: merge

  Publish:
    name: Publish
    if: github.event_name == 'release'
    needs: All
    timeout-minutes: 1
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: Build
          path: dist
      - name: Publish to Pypi
        uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
